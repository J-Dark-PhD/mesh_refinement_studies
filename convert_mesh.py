import meshio
from parametric_values import max_size_range, component_to_test


def convert_med_to_xdmf(
    med_filename, filename_extension="2D", results_folder="mesh_files"
):
    """convert .med files generated by salome into a mesh_domains and
    mesh_boundaries files which can be read by FESTIM

    Args:
        med_filename (string): filename of .med file (must end in .med)

    Returns:
        domains_file: mesh domains
        boundaries_file: mesh boundaries
    """
    mesh = meshio.read("{}".format(med_filename))

    # In order to use MeshFunction of FEniCS
    # The tag must be a positive number (size_t)

    # this doesn't work cause cell_data_dict doesn't have a setter
    mesh.cell_data_dict["cell_tags"]["triangle"] *= -1
    mesh.cell_data_dict["cell_tags"]["line"] *= -1

    # print the correspondance
    print("This is the correspondance dict")
    print(mesh.cell_tags)
    # mesh.cell_tags = {-6: ['Down'], -7: ['Top'], -8: ['Lying on Top']}

    # Export mesh that contains only triangular faces
    # along with tags
    domains_file = meshio.write_points_cells(
        "{}/mesh_domains_{}.xdmf".format(results_folder, filename_extension),
        mesh.points,
        [mesh.cells[1]],
        cell_data={"f": [-1 * mesh.cell_data["cell_tags"][1]]},
    )

    # Export mesh that contains only lines
    # along with tags

    boundaries_file = meshio.write_points_cells(
        "{}/mesh_boundaries_{}.xdmf".format(results_folder, filename_extension),
        mesh.points,
        [mesh.cells[0]],
        cell_data={"f": [-1 * mesh.cell_data["cell_tags"][0]]},
    )

    return domains_file, boundaries_file


if __name__ == "__main__":
    # convert_med_to_xdmf("Mesh_2D.med")
    for size in max_size_range:
        mesh_folder = "meshes/"
        results_folder = mesh_folder + "xdmf_files/"
        med_filename = mesh_folder + "med_files/{}_max_size_{:.2e}.med".format(
            component_to_test, size
        )
        filename_extension = "{}_max_size_{:.2e}".format(component_to_test, size)
        domains_file, boundary_file = convert_med_to_xdmf(
            med_filename=med_filename,
            filename_extension=filename_extension,
            results_folder=results_folder,
        )
